using System;


public struct Time
{
    public int Hours { get; set; }
    public int Minutes { get; set; }

   
    public static implicit operator Time(int minutes)
    {
        if (minutes < 0 || minutes >= 24 * 60)
        {
            throw new ArgumentOutOfRangeException(nameof(minutes), "Minutes must be between 0 and 1439 (inclusive).");
        }
        return new Time { Hours = minutes / 60, Minutes = minutes % 60 };
    }

    public static explicit operator int(Time time)
    {
        if (time.Hours < 0 || time.Hours > 23 || time.Minutes < 0 || time.Minutes > 59)
        {
            throw new ArgumentOutOfRangeException(nameof(time), "Invalid Time values.");
        }
        return time.Hours * 60 + time.Minutes;
    }


    public override string ToString()
    {
        return $"{Hours:D2}:{Minutes:D2}";
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        
        int totalMinutes = 780; 
        Time time1 = totalMinutes;
        Console.WriteLine($"Implicit conversion: {totalMinutes} minutes is {time1}");


        Time time2 = new Time { Hours = 10, Minutes = 30 };
        int minutesSinceMidnight = (int)time2;
        Console.WriteLine($"Explicit conversion: {time2} is {minutesSinceMidnight} minutes since midnight");


        

        try
        {
            int invalidMinutes = 1500;
            Time invalidTime = invalidMinutes; 
            Console.WriteLine(invalidTime);
        }
        catch (ArgumentOutOfRangeException ex)
        {
            Console.WriteLine($"Error during implicit conversion: {ex.Message}");
        }

        try
        {
            Time invalidTime2 = new Time { Hours = 24, Minutes = 0 };
            int minutes = (int)invalidTime2; 
            Console.WriteLine(minutes);
        }
        catch (ArgumentOutOfRangeException ex)
        {
            Console.WriteLine($"Error during explicit conversion: {ex.Message}");
        }
    }
}
