using System;

public struct Time
{
    public int Hours { get; set; }
    public int Minutes { get; set; }
    public int Seconds { get; set; }

    public Time(int totalSeconds)
    {
        Hours = totalSeconds / 3600;
        Minutes = (totalSeconds % 3600) / 60;
        Seconds = totalSeconds % 60;
    }

    public Time(int hours, int minutes, int seconds)
    {
        Hours = hours;
        Minutes = minutes;
        Seconds = seconds;
    }

    public static Time operator +(Time t1, Time t2)
    {
        int totalSeconds = t1.TotalSeconds() + t2.TotalSeconds();
        return new Time(totalSeconds);
    }

    public static Time operator -(Time t1, Time t2)
    {
        int totalSeconds = t1.TotalSeconds() - t2.TotalSeconds();
        //Handle negative time (optional, depends on requirements)
        if (totalSeconds < 0) {
            totalSeconds = 0; //or throw an exception
        }
        return new Time(totalSeconds);
    }


    private int TotalSeconds()
    {
        return Hours * 3600 + Minutes * 60 + Seconds;
    }

    public override string ToString()
    {
        return $"{Hours:D2}:{Minutes:D2}:{Seconds:D2}";
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        Time time1 = new Time(1, 30, 15);
        Time time2 = new Time(2, 15, 45);
        Time time3 = new Time(5000); //Example using the int constructor


        Console.WriteLine($"Time 1: {time1}");
        Console.WriteLine($"Time 2: {time2}");
        Console.WriteLine($"Time 3: {time3}");

        Time sum = time1 + time2;
        Console.WriteLine($"Time 1 + Time 2: {sum}");

        Time difference = time2 - time1;
        Console.WriteLine($"Time 2 - Time 1: {difference}");


        //Example of potential negative time handling (the optional part)
        Time time4 = new Time(1,0,0);
        Time time5 = new Time(2,0,0);
        Time diff2 = time4 - time5;
        Console.WriteLine($"Time 4 - Time 5: {diff2}"); //Will output 00:00:00 because of the negative time handling

    }
}
